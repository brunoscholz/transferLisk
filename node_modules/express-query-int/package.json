{
  "name": "express-query-int",
  "version": "1.0.0",
  "description": "Convert query strings to numbers for express/connect applications.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mariusc23/express-query-int.git"
  },
  "keywords": [
    "express",
    "connect",
    "query",
    "qs",
    "parseInt",
    "parseFloat"
  ],
  "author": {
    "name": "Marius Craciunoiu",
    "url": "http://www.mariusc23.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mariusc23/express-query-int/issues"
  },
  "homepage": "https://github.com/mariusc23/express-query-int",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.11.0",
    "grunt-contrib-nodeunit": "^0.4.1",
    "jshint-stylish": "^1.0.1",
    "load-grunt-tasks": "^3.1.0"
  },
  "readme": "express-query-int\n=================\n\n> Convert query strings to numbers for express/connect applications.\n\n[![npm](https://img.shields.io/npm/v/express-query-int.svg)](https://www.npmjs.com/package/express-query-int)\n[![build status](https://travis-ci.org/mariusc23/express-query-int.svg)](https://travis-ci.org/mariusc23/express-query-int)\n\n## Installation\n\n    npm install --save express-query-int\n\n\n## Getting Started\nThe module will recursively attempt to parse every property in `req.query`.\n\nLoad it right after the `bodyParser`:\n\n```js\nvar queryParser = require('express-query-int');\n\n// [...]\n\napp.use(bodyParser.json());\napp.use(queryParser());\n```\n\n#### Without\n```js\n// ?a=1&b[c]=2\nconsole.log(req.query);\n// => { a: '4', b: { c: '2' } }\n```\n\n#### With\n```js\n// ?a=1&b[c]=2\nconsole.log(req.query);\n// => { a: 4, b: { c: 2 } }\n```\n\n### Floating Point\nBy default the parser will use `parseInt` to convert numbers. You can use `parseFloat` or your own function.\n\n```js\napp.use(queryParser({\n  parser: parseFloat\n}));\n```\n\n### Custom Parser\nProvide a function that takes two arguments:\n\n- `value`: a string potentially representing a number\n- `radix`: 10\n- `name` : a name of query argument\n\n```js\napp.use(queryParser({\n  parser: function(value, radix, name) {\n    if (true) {\n      return modifiedValue;\n    }\n    else {\n      return NaN;\n    }\n  }\n}));\n```\n\n## License\nCopyright (c) 2015 Marius Craciunoiu. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "express-query-int@1.0.0",
  "_shasum": "5cc92f07a458f90efda25b350dc016fe0b00dcf0",
  "_resolved": "https://github.com/LiskHQ/express-query-int/tarball/master",
  "_from": "https://github.com/LiskHQ/express-query-int/tarball/master"
}
